version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: incus_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: incus_dev
      POSTGRES_USER: incus_user
      POSTGRES_PASSWORD: incus_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - incus_network

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: incus_backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=development
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
    networks:
      - incus_network
    stdin_open: true
    tty: true

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: incus_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - incus_network
    stdin_open: true
    tty: true

  # Prisma Studio (Database GUI)
  prisma-studio:
    image: node:18-alpine
    container_name: incus_prisma_studio
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://incus_user:incus_password@postgres:5432/incus_dev
    volumes:
      - ./backend:/app
    working_dir: /app
    command: >
      sh -c "npm install -g prisma &&
             npx prisma generate &&
             npx prisma studio --hostname 0.0.0.0 --port 5555"
    depends_on:
      - postgres
    networks:
      - incus_network

volumes:
  postgres_data:

networks:
  incus_network:
    driver: bridge
